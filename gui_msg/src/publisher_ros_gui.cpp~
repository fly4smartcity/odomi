#include "ros/ros.h"
#include "gui_msg/msg_ros_gui.h"
#include <stdlib.h> // abs()


int main(int argc, char **argv)
{

  //coordinate GPS home e goal
  float GpsLatHome=45.05;
  float GpsLngHome=7.64;
  float GpsLatGoal=45.08;
  float GpsLngGoal=7.68;
  //var per inviare coordinate gps drone
  float GpsLatDrone;
  float GpsLngDrone;


  int randnum;
  int k=10;
int c=15;//const per inperpolazione dei punti del drone
  ros::init(argc, argv, "talker");


  ros::NodeHandle n;


  ros::Publisher ROSGUI_topic = n.advertise<gui_msg::msg_ros_gui>("ros_gui_msg", 1000);

  ros::Rate loop_rate(50);


  int count = c;
  while (ros::ok() && count>=0)
  {
    /***************
    GENERO NUMERO CASUALE X MESSAGGI
    *****************/
    randnum=(int)((2*(rand()%k))-(k));//generate rnd number tra K e -K
    ROS_INFO("%d",randnum);//print them
    /*******************
    ISTANZIO IL MESSAGGIO
    *******************/
    gui_msg::msg_ros_gui msg;

    /******************
    PREPARO IL MESSAGGIO
    ******************/
    msg.batteryLevel=0+abs(randnum*10);// int8 livello della batteria: va da 0 a 100
    msg.compass=0+randnum;/* int16
    bussola, va da -2e16 a +2e16,
    Un giro della lancetta rossa corrisponde a 10
    lo zero si trova ogni k*10, k app a interi: compass=0=10=20=-10 corrisponde al nord.
    se ho compass=0 e voglio fargli segnare l'est edvo mettere compass=(10/4)=2.5
    owest compass=(3*10/4)=7.5*/
    msg.variometer=0.2+randnum;//float64 variometro va da -10 a 10 m/s 
    msg.altimeter=0+randnum*100+randnum*randnum*10+randnum;//int16 altimetro: misura la quota in metri slm

    GpsLatDrone = GpsLatHome+(((GpsLatGoal-GpsLatHome)/(c))*(c-count));//lat drone interpolata
    GpsLngDrone = GpsLngHome+(((GpsLngGoal-GpsLngHome)/(c))*(c-count));//lng drone interpolata
//attitude indicator
    msg.attitudePitch=(2*(rand()%k))-(k);//beccheggio: angolo rispetto prua e poppa (+sale -scende)
    msg.attitudeRoll=(2*(rand()%k))-(k);//rollio: angolo rispetto l'orrizzonte con le due ali (+destra -sinistra)
    msg.GPS1drone=GpsLatDrone;//float64 GPS1drone
    msg.GPS2drone=GpsLngDrone;//float64 GPS2drone

    count--;
    /******************
    STAMPO
    ******************/


    ROS_INFO("\nbattery:\t%d\ncompass:\t%d\nvariometer:\t%f\naltimeter:\t%d\nGPS1drone:\t%f\nGPS2drone:\t%f\nattitudePitch:\t%f\nattitudeRoll:\t%f",msg.batteryLevel,msg.compass,msg.variometer,msg.altimeter,msg.GPS1drone,msg.GPS2drone,msg.attitudePitch,msg.attitudeRoll);
    /******************
    INVIO
    ******************/

    ROSGUI_topic.publish(msg);

    ros::spinOnce();

    loop_rate.sleep();
    //++count;
  }


  return 0;
}
